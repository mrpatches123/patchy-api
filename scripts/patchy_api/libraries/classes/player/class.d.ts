import { Player as PlayerType, Container, Vector, EntityEquipmentInventoryComponent, ItemStack, ContainerSlot, EntityType } from "@minecraft/server";
import { gamemodeIndexMap } from "../gamemode.js";
import { EntityOnFireComponent, EntityAddRiderComponent, EntityAgeableComponent, EntityBreathableComponent, EntityCanClimbComponent, EntityCanFlyComponent, EntityCanPowerJumpComponent, EntityColorComponent, EntityFireImmuneComponent, EntityFloatsInLiquidComponent, EntityFlyingSpeedComponent, EntityFrictionModifierComponent, EntityGroundOffsetComponent, EntityHealableComponent, EntityHealthComponent, EntityInventoryComponent, EntityIsBabyComponent, EntityIsChargedComponent, EntityIsChestedComponent, EntityIsDyeableComponent, EntityIsHiddenWhenInvisibleComponent, EntityIsIgnitedComponent, EntityIsIllagerCaptainComponent, EntityIsSaddledComponent, EntityIsShakingComponent, EntityIsShearedComponent, EntityIsStackableComponent, EntityIsStunnedComponent, EntityIsTamedComponent, EntityItemComponent, EntityLavaMovementComponent, EntityLeashableComponent, EntityMarkVariantComponent, EntityMountTamingComponent, EntityMovementAmphibiousComponent, EntityMovementBasicComponent, EntityMovementComponent, EntityMovementFlyComponent, EntityMovementGenericComponent, EntityMovementGlideComponent, EntityMovementHoverComponent, EntityMovementJumpComponent, EntityMovementSkipComponent, EntityMovementSwayComponent, EntityNavigationClimbComponent, EntityNavigationFloatComponent, EntityNavigationFlyComponent, EntityNavigationGenericComponent, EntityNavigationHoverComponent, EntityNavigationWalkComponent, EntityPushThroughComponent, EntityRideableComponent, EntityScaleComponent, EntitySkinIdComponent, EntityStrengthComponent, EntityTameableComponent, EntityUnderwaterMovementComponent, EntityVariantComponent, EntityWantsJockeyComponent } from '@minecraft/server';
interface EntityComponents {
    'minecraft:onfire': EntityOnFireComponent;
    'onfire': EntityOnFireComponent;
    'minecraft:addrider': EntityAddRiderComponent;
    'addrider': EntityAddRiderComponent;
    'minecraft:ageable': EntityAgeableComponent;
    'ageable': EntityAgeableComponent;
    'minecraft:breathable': EntityBreathableComponent;
    'breathable': EntityBreathableComponent;
    'minecraft:can_climb': EntityCanClimbComponent;
    'can_climb': EntityCanClimbComponent;
    'minecraft:can_fly': EntityCanFlyComponent;
    'can_fly': EntityCanFlyComponent;
    'minecraft:can_power_jump': EntityCanPowerJumpComponent;
    'can_power_jump': EntityCanPowerJumpComponent;
    'minecraft:color': EntityColorComponent;
    'color': EntityColorComponent;
    'minecraft:equipment_inventory': EntityEquipmentInventoryComponent;
    'equipment_inventory': EntityEquipmentInventoryComponent;
    'minecraft:fire_immune': EntityFireImmuneComponent;
    'fire_immune': EntityFireImmuneComponent;
    'minecraft:floats_in_liquid': EntityFloatsInLiquidComponent;
    'floats_in_liquid': EntityFloatsInLiquidComponent;
    'minecraft:flying_speed': EntityFlyingSpeedComponent;
    'flying_speed': EntityFlyingSpeedComponent;
    'minecraft:friction_modifier': EntityFrictionModifierComponent;
    'friction_modifier': EntityFrictionModifierComponent;
    'minecraft:ground_offset': EntityGroundOffsetComponent;
    'ground_offset': EntityGroundOffsetComponent;
    'minecraft:healable': EntityHealableComponent;
    'healable': EntityHealableComponent;
    'minecraft:health': EntityHealthComponent;
    'health': EntityHealthComponent;
    'minecraft:inventory': EntityInventoryComponent;
    'inventory': EntityInventoryComponent;
    'minecraft:is_baby': EntityIsBabyComponent;
    'is_baby': EntityIsBabyComponent;
    'minecraft:is_charged': EntityIsChargedComponent;
    'is_charged': EntityIsChargedComponent;
    'minecraft:is_chested': EntityIsChestedComponent;
    'is_chested': EntityIsChestedComponent;
    'minecraft:is_dyeable': EntityIsDyeableComponent;
    'is_dyeable': EntityIsDyeableComponent;
    'minecraft:is_hidden_when_invisible': EntityIsHiddenWhenInvisibleComponent;
    'is_hidden_when_invisible': EntityIsHiddenWhenInvisibleComponent;
    'minecraft:is_ignited': EntityIsIgnitedComponent;
    'is_ignited': EntityIsIgnitedComponent;
    'minecraft:is_illager_captain': EntityIsIllagerCaptainComponent;
    'is_illager_captain': EntityIsIllagerCaptainComponent;
    'minecraft:is_saddled': EntityIsSaddledComponent;
    'is_saddled': EntityIsSaddledComponent;
    'minecraft:is_shaking': EntityIsShakingComponent;
    'is_shaking': EntityIsShakingComponent;
    'minecraft:is_sheared': EntityIsShearedComponent;
    'is_sheared': EntityIsShearedComponent;
    'minecraft:is_stackable': EntityIsStackableComponent;
    'is_stackable': EntityIsStackableComponent;
    'minecraft:is_stunned': EntityIsStunnedComponent;
    'is_stunned': EntityIsStunnedComponent;
    'minecraft:is_tamed': EntityIsTamedComponent;
    'is_tamed': EntityIsTamedComponent;
    'minecraft:item': EntityItemComponent;
    'item': EntityItemComponent;
    'minecraft:lava_movement': EntityLavaMovementComponent;
    'lava_movement': EntityLavaMovementComponent;
    'minecraft:leashable': EntityLeashableComponent;
    'leashable': EntityLeashableComponent;
    'minecraft:mark_variant': EntityMarkVariantComponent;
    'mark_variant': EntityMarkVariantComponent;
    'minecraft:tamemount': EntityMountTamingComponent;
    'tamemount': EntityMountTamingComponent;
    'minecraft:movement.amphibious': EntityMovementAmphibiousComponent;
    'movement.amphibious': EntityMovementAmphibiousComponent;
    'minecraft:movement.basic': EntityMovementBasicComponent;
    'movement.basic': EntityMovementBasicComponent;
    'minecraft:movement': EntityMovementComponent;
    'movement': EntityMovementComponent;
    'minecraft:movement.fly': EntityMovementFlyComponent;
    'movement.fly': EntityMovementFlyComponent;
    'minecraft:movement.generic': EntityMovementGenericComponent;
    'movement.generic': EntityMovementGenericComponent;
    'minecraft:movement.glide': EntityMovementGlideComponent;
    'movement.glide': EntityMovementGlideComponent;
    'minecraft:movement.hover': EntityMovementHoverComponent;
    'movement.hover': EntityMovementHoverComponent;
    'minecraft:movement.jump': EntityMovementJumpComponent;
    'movement.jump': EntityMovementJumpComponent;
    'minecraft:movement.skip': EntityMovementSkipComponent;
    'movement.skip': EntityMovementSkipComponent;
    'minecraft:movement.sway': EntityMovementSwayComponent;
    'movement.sway': EntityMovementSwayComponent;
    'minecraft:navigation.climb': EntityNavigationClimbComponent;
    'navigation.climb': EntityNavigationClimbComponent;
    'minecraft:navigation.float': EntityNavigationFloatComponent;
    'navigation.float': EntityNavigationFloatComponent;
    'minecraft:navigation.fly': EntityNavigationFlyComponent;
    'navigation.fly': EntityNavigationFlyComponent;
    'minecraft:navigation.generic': EntityNavigationGenericComponent;
    'navigation.generic': EntityNavigationGenericComponent;
    'minecraft:navigation.hover': EntityNavigationHoverComponent;
    'navigation.hover': EntityNavigationHoverComponent;
    'minecraft:navigation.walk': EntityNavigationWalkComponent;
    'navigation.walk': EntityNavigationWalkComponent;
    'minecraft:push_through': EntityPushThroughComponent;
    'push_through': EntityPushThroughComponent;
    'minecraft:rideable': EntityRideableComponent;
    'rideable': EntityRideableComponent;
    'minecraft:scale': EntityScaleComponent;
    'scale': EntityScaleComponent;
    'minecraft:skin_id': EntitySkinIdComponent;
    'skin_id': EntitySkinIdComponent;
    'minecraft:strength': EntityStrengthComponent;
    'strength': EntityStrengthComponent;
    'minecraft:tameable': EntityTameableComponent;
    'tameable': EntityTameableComponent;
    'minecraft:underwater_movement': EntityUnderwaterMovementComponent;
    'underwater_movement': EntityUnderwaterMovementComponent;
    'minecraft:variant': EntityVariantComponent;
    'variant': EntityVariantComponent;
    'minecraft:wants_jockey': EntityWantsJockeyComponent;
    'wants_jockey': EntityWantsJockeyComponent;
}
export declare class Player implements PlayerType {
    root: PlayerType;
    constructor(player: PlayerType);
    addExperience(...args: Parameters<PlayerType['addExperience']>): number;
    get gamemode(): keyof typeof gamemodeIndexMap;
    set gamemode(value: keyof typeof gamemodeIndexMap);
    get loaded(): boolean;
    get offhand(): ContainerSlot;
    get mainHand(): ContainerSlot;
    set mainHand(value: ItemStack | ContainerSlot);
    get container(): Container;
    get inventory(): import("../players/class.js").Inventory;
    get scores(): Record<string, number | undefined>;
    get properties(): Record<string, string | number | boolean | undefined>;
    get memory(): any;
    get dimension(): import("@minecraft/server").Dimension;
    get headLocation(): import("@minecraft/server").Vector3;
    get id(): string;
    get isSneaking(): boolean;
    get isGliding(): boolean;
    get isJumping(): boolean;
    get fallDistance(): number;
    get isClimbing(): boolean;
    get isFlying(): boolean;
    get isInWater(): boolean;
    get isOnGround(): boolean;
    get isSprinting(): boolean;
    get isFalling(): boolean;
    get isSwimming(): boolean;
    get lifetimeState(): import("@minecraft/server").EntityLifetimeState;
    isValid(): boolean;
    get level(): number;
    get location(): import("@minecraft/server").Vector3;
    get name(): string;
    get nameTag(): string;
    set nameTag(value: string);
    get onScreenDisplay(): import("@minecraft/server").ScreenDisplay;
    get rotation(): import("@minecraft/server").Vector2;
    get scoreboard(): import("@minecraft/server").ScoreboardIdentity | undefined;
    get scoreboardIdentity(): import("@minecraft/server").ScoreboardIdentity | undefined;
    get selectedSlot(): number;
    set selectedSlot(value: number);
    get totalXpNeededForNextLevel(): number;
    get xpEarnedAtCurrentLevel(): number;
    get target(): import("@minecraft/server").Entity;
    get typeId(): string;
    get velocity(): import("@minecraft/server").Vector3;
    get viewVector(): Vector;
    get viewDirection(): import("@minecraft/server").Vector3;
    applyDamage(...args: Parameters<PlayerType['applyDamage']>): boolean;
    applyImpulse(...args: Parameters<PlayerType['applyImpulse']>): void;
    applyKnockback(...args: Parameters<PlayerType['applyKnockback']>): void;
    addEffect(...args: Parameters<PlayerType['addEffect']>): void;
    addLevels(...args: Parameters<PlayerType['addLevels']>): number;
    clearSpawn(): void;
    clearVelocity(): void;
    addTag(...args: Parameters<PlayerType['addTag']>): boolean;
    extinguishFire(...args: Parameters<PlayerType['extinguishFire']>): boolean;
    getBlockFromViewVector(...args: Parameters<PlayerType['getBlockFromViewDirection']>): import("@minecraft/server").BlockRaycastHit | undefined;
    getBlockFromViewDirection(...args: Parameters<PlayerType['getBlockFromViewDirection']>): import("@minecraft/server").BlockRaycastHit | undefined;
    getComponent<componentKey extends keyof EntityComponents>(componentId: componentKey): EntityComponents[componentKey];
    getComponents(...args: Parameters<PlayerType['getComponents']>): import("@minecraft/server").EntityComponent[];
    getDynamicProperty(...args: Parameters<PlayerType['getDynamicProperty']>): string | number | boolean | undefined;
    getEffect(...args: Parameters<PlayerType['getEffect']>): import("@minecraft/server").Effect | undefined;
    getEffects(...args: Parameters<PlayerType['getEffects']>): import("@minecraft/server").Effect[];
    getEntitiesFromViewVector(...args: Parameters<PlayerType['getEntitiesFromViewDirection']>): import("@minecraft/server").EntityRaycastHit[];
    getEntitiesFromViewDirection(...args: Parameters<PlayerType['getEntitiesFromViewDirection']>): import("@minecraft/server").EntityRaycastHit[];
    getHeadLocation(...args: Parameters<PlayerType['getHeadLocation']>): import("@minecraft/server").Vector3;
    getItemCooldown(...args: Parameters<PlayerType['getItemCooldown']>): number;
    getRotation(): import("@minecraft/server").Vector2;
    getSpawnPoint(): import("@minecraft/server").DimensionLocation | undefined;
    getSpawnPosition(): import("@minecraft/server").DimensionLocation | undefined;
    getTags(...args: Parameters<PlayerType['getTags']>): string[];
    getTotalXp(): number;
    getVelocity(): import("@minecraft/server").Vector3;
    getViewDirection(): import("@minecraft/server").Vector3;
    hasComponent(...args: Parameters<PlayerType['hasComponent']>): boolean;
    hasTag(...args: Parameters<PlayerType['hasTag']>): boolean;
    isOp(...args: Parameters<PlayerType['isOp']>): boolean;
    kill(...args: Parameters<PlayerType['kill']>): boolean;
    playAnimation(...args: Parameters<PlayerType['playAnimation']>): void;
    playSound(...args: Parameters<PlayerType['playSound']>): void;
    postClientMessage(...args: Parameters<PlayerType['postClientMessage']>): void;
    removeEffect(...args: Parameters<PlayerType['removeEffect']>): boolean;
    removeAllEffects(): void;
    removeDynamicProperty(...args: Parameters<PlayerType['removeDynamicProperty']>): boolean;
    removeTag(...args: Parameters<PlayerType['removeTag']>): boolean;
    resetLevel(...args: Parameters<PlayerType['resetLevel']>): void;
    runCommandAsync(...args: Parameters<PlayerType['runCommandAsync']>): Promise<import("@minecraft/server").CommandResult>;
    runCommand(...args: Parameters<PlayerType['runCommand']>): import("@minecraft/server").CommandResult;
    setDynamicProperty(...args: Parameters<PlayerType['setDynamicProperty']>): void;
    setOnFire(...args: Parameters<PlayerType['setOnFire']>): boolean;
    setOp(...args: Parameters<PlayerType['setOp']>): void;
    setRotation(...args: Parameters<PlayerType['setRotation']>): void;
    setSpawn(...args: Parameters<PlayerType['setSpawnPoint']>): void;
    setSpawnPoint(...args: Parameters<PlayerType['setSpawnPoint']>): void;
    startItemCooldown(...args: Parameters<PlayerType['startItemCooldown']>): void;
    teleport(...args: Parameters<PlayerType['teleport']>): void;
    tryTeleport(...args: Parameters<PlayerType['tryTeleport']>): boolean;
    sendMessage(...args: Parameters<PlayerType['sendMessage']>): void;
    tell(...args: Parameters<PlayerType['sendMessage']>): void;
    triggerEvent(...args: Parameters<PlayerType['triggerEvent']>): void;
}
export declare function setProptotype(entity: PlayerType | EntityType): EntityType | Player;
export {};
