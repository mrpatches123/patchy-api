import { EntityComponentTypeMap, Player as PlayerType, Container, Vector, ItemStack, ContainerSlot, EntityType, Camera, DimensionLocation, EntityComponent } from "@minecraft/server";
import { gamemodeIndexMap } from "../gamemode.js";
export declare class Player implements PlayerType {
    root: PlayerType;
    constructor(player: PlayerType);
    kick(message?: string): void;
    matches(...args: Parameters<PlayerType['matches']>): boolean;
    getDynamicPropertyTotalByteCount(): number;
    getDynamicPropertyIds(): string[];
    clearDynamicProperties(): void;
    stopMusic(): void;
    queueMusic(...args: Parameters<PlayerType['queueMusic']>): void;
    playMusic(...args: Parameters<PlayerType['playMusic']>): void;
    resetProperty(...args: Parameters<PlayerType['resetProperty']>): string | number | boolean;
    setProperty(...args: Parameters<PlayerType['setProperty']>): void;
    remove(): void;
    getProperty(...args: Parameters<PlayerType['getProperty']>): string | number | boolean | undefined;
    get isSleeping(): boolean;
    get isEmoting(): boolean;
    get camera(): Camera;
    addExperience(...args: Parameters<PlayerType['addExperience']>): number;
    get gamemode(): keyof typeof gamemodeIndexMap;
    set gamemode(value: keyof typeof gamemodeIndexMap);
    get loaded(): boolean;
    get offhand(): ContainerSlot;
    get mainHand(): ContainerSlot;
    set mainHand(value: ItemStack | ContainerSlot | undefined);
    get container(): Container;
    get inventory(): import("../players/class.js").Inventory;
    get scores(): Record<string, number | undefined>;
    get properties(): import("../property.js").DynamicPropertiesForInstance;
    get memory(): any;
    get dimension(): import("@minecraft/server").Dimension;
    get headLocation(): import("@minecraft/server").Vector3;
    get id(): string;
    get isSneaking(): boolean;
    get isGliding(): boolean;
    get isJumping(): boolean;
    get fallDistance(): number;
    get isClimbing(): boolean;
    get isFlying(): boolean;
    get isInWater(): boolean;
    get isOnGround(): boolean;
    get isSprinting(): boolean;
    get isFalling(): boolean;
    get isSwimming(): boolean;
    get lifetimeState(): import("@minecraft/server").EntityLifetimeState;
    isValid(): boolean;
    get level(): number;
    get location(): import("@minecraft/server").Vector3;
    get name(): string;
    get nameTag(): string;
    set nameTag(value: string);
    get onScreenDisplay(): import("@minecraft/server").ScreenDisplay;
    get rotation(): import("@minecraft/server").Vector2;
    get scoreboard(): import("@minecraft/server").ScoreboardIdentity | undefined;
    get scoreboardIdentity(): import("@minecraft/server").ScoreboardIdentity | undefined;
    get selectedSlot(): number;
    set selectedSlot(value: number);
    get totalXpNeededForNextLevel(): number;
    get xpEarnedAtCurrentLevel(): number;
    get target(): import("@minecraft/server").Entity;
    get typeId(): string;
    get velocity(): import("@minecraft/server").Vector3;
    get viewVector(): Vector;
    get viewDirection(): import("@minecraft/server").Vector3;
    applyDamage(...args: Parameters<PlayerType['applyDamage']>): boolean;
    applyImpulse(...args: Parameters<PlayerType['applyImpulse']>): void;
    applyKnockback(...args: Parameters<PlayerType['applyKnockback']>): void;
    addEffect(...args: Parameters<PlayerType['addEffect']>): void;
    addLevels(...args: Parameters<PlayerType['addLevels']>): number;
    clearSpawn(): void;
    clearVelocity(): void;
    addTag(...args: Parameters<PlayerType['addTag']>): boolean;
    extinguishFire(...args: Parameters<PlayerType['extinguishFire']>): boolean;
    getBlockFromViewVector(...args: Parameters<PlayerType['getBlockFromViewDirection']>): import("@minecraft/server").BlockRaycastHit | undefined;
    getBlockFromViewDirection(...args: Parameters<PlayerType['getBlockFromViewDirection']>): import("@minecraft/server").BlockRaycastHit | undefined;
    getComponent<T extends keyof EntityComponentTypeMap>(componentId: T): EntityComponentTypeMap[T];
    getComponents(...args: Parameters<PlayerType['getComponents']>): EntityComponent[];
    getDynamicProperty(...args: Parameters<PlayerType['getDynamicProperty']>): string | number | boolean | import("@minecraft/server").Vector3 | undefined;
    getEffect(...args: Parameters<PlayerType['getEffect']>): import("@minecraft/server").Effect | undefined;
    getEffects(...args: Parameters<PlayerType['getEffects']>): import("@minecraft/server").Effect[];
    getEntitiesFromViewVector(...args: Parameters<PlayerType['getEntitiesFromViewDirection']>): import("@minecraft/server").EntityRaycastHit[];
    getEntitiesFromViewDirection(...args: Parameters<PlayerType['getEntitiesFromViewDirection']>): import("@minecraft/server").EntityRaycastHit[];
    getHeadLocation(...args: Parameters<PlayerType['getHeadLocation']>): import("@minecraft/server").Vector3;
    getItemCooldown(...args: Parameters<PlayerType['getItemCooldown']>): number;
    getRotation(): import("@minecraft/server").Vector2;
    getSpawnPoint(): DimensionLocation | undefined;
    getSpawnPosition(): DimensionLocation | undefined;
    getTags(...args: Parameters<PlayerType['getTags']>): string[];
    getTotalXp(): number;
    getVelocity(): import("@minecraft/server").Vector3;
    getViewDirection(): import("@minecraft/server").Vector3;
    hasComponent(...args: Parameters<PlayerType['hasComponent']>): boolean;
    hasTag(...args: Parameters<PlayerType['hasTag']>): boolean;
    isOp(...args: Parameters<PlayerType['isOp']>): boolean;
    kill(...args: Parameters<PlayerType['kill']>): boolean;
    playAnimation(...args: Parameters<PlayerType['playAnimation']>): void;
    playSound(...args: Parameters<PlayerType['playSound']>): void;
    postClientMessage(...args: Parameters<PlayerType['postClientMessage']>): void;
    removeEffect(...args: Parameters<PlayerType['removeEffect']>): boolean;
    removeAllEffects(): void;
    removeDynamicProperty(identifer: string): void;
    removeTag(...args: Parameters<PlayerType['removeTag']>): boolean;
    resetLevel(...args: Parameters<PlayerType['resetLevel']>): void;
    runCommandAsync(...args: Parameters<PlayerType['runCommandAsync']>): Promise<import("@minecraft/server").CommandResult>;
    runCommand(...args: Parameters<PlayerType['runCommand']>): import("@minecraft/server").CommandResult;
    setDynamicProperty(...args: Parameters<PlayerType['setDynamicProperty']>): void;
    setOnFire(...args: Parameters<PlayerType['setOnFire']>): boolean;
    setOp(...args: Parameters<PlayerType['setOp']>): void;
    setRotation(...args: Parameters<PlayerType['setRotation']>): void;
    setSpawn(...args: Parameters<PlayerType['setSpawnPoint']>): void;
    setSpawnPoint(...args: Parameters<PlayerType['setSpawnPoint']>): void;
    startItemCooldown(...args: Parameters<PlayerType['startItemCooldown']>): void;
    teleport(...args: Parameters<PlayerType['teleport']>): void;
    tryTeleport(...args: Parameters<PlayerType['tryTeleport']>): boolean;
    sendMessage(...args: Parameters<PlayerType['sendMessage']>): void;
    tell(...args: Parameters<PlayerType['sendMessage']>): void;
    triggerEvent(...args: Parameters<PlayerType['triggerEvent']>): void;
}
export declare function setProptotype(entity: PlayerType | EntityType): EntityType | Player;
